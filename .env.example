# War & Peace — .env.example
# Заполните секреты и при необходимости измените дефолты.
# Формат: KEY=value (без кавычек).

# --- Основное/БД ---
# PostgreSQL (обязательно). Приложение работает только с Postgres.
# Значения ниже используются docker-compose сервисом postgres.
POSTGRES_DB=warandpeace
POSTGRES_USER=wp
# POSTGRES_PASSWORD= # установите надёжный пароль (не коммитьте реальные значения)
DATABASE_URL=postgresql+psycopg://wp:${POSTGRES_PASSWORD}@postgres:5432/warandpeace
# Часовой пояс для работы приложения. Используется для корректного отображения времени в логах и интерфейсе.
TIMEZONE=Europe/Moscow

# --- Telegram ---
# Токен вашего Telegram-бота. Получается у @BotFather.
TELEGRAM_BOT_TOKEN=changeme
# ID вашего Telegram-канала (или чата), куда будут отправляться посты.
TELEGRAM_CHANNEL_ID=123456789
# ID администратора бота в Telegram для получения системных уведомлений и ошибок.
TELEGRAM_ADMIN_ID=123456789
# Список ID администраторов через запятую для получения уведомлений (альтернатива TELEGRAM_ADMIN_ID).
# TELEGRAM_ADMIN_IDS=123456789,987654321

# --- LLM и модели ---
# Основная модель для генерации текстов (gemini или mistral).
LLM_PRIMARY=gemini                 # gemini|mistral
# Включить/выключить использование модели Gemini от Google.
GEMINI_ENABLED=true                # true|false|1|0|yes|no
# Включить/выключить использование модели Mistral.
MISTRAL_ENABLED=true               # true|false|1|0|yes|no
# Список API-ключей Google через запятую. Позволяет распределять нагрузку между несколькими ключами.
# Рекомендуется указывать список ключей через запятую:
GOOGLE_API_KEYS=
# Для обратной совместимости можно также задать одиночные ключи:
# GOOGLE_API_KEY=
# GOOGLE_API_KEY_1=

# API-ключ для модели Mistral.
MISTRAL_API_KEY=
# Название модели Gemini для использования.
GEMINI_MODEL_NAME=models/gemini-1.5-flash-latest
# Название модели Mistral для использования.
MISTRAL_MODEL_NAME=mistral-large-latest

# --- Директории шаблонов промптов ---
# Директория, где хранятся шаблоны промптов для генерации текстов.
PROMPTS_DIR=prompts

# --- Служебные промпты (без ротации) ---
# Включить/выключить использование служебных JSON-промптов (v1). Они работают параллельно с основными.
SERVICE_PROMPTS_ENABLED=true

# --- Telegram канал для служебных прогнозов ---
# Включить/выключить отправку служебных прогнозов в отдельный Telegram-канал.
SERVICE_TG_ENABLED=false
# ID или @username служебного Telegram-канала для публикации специальных прогнозов.
SERVICE_TG_CHANNEL_ID=

# --- Веб-интерфейс ---
# Включить/выключить веб-сервер (uvicorn) при запуске.
WEB_ENABLED=false                  # включить сервер (uvicorn) при запуске server.py напрямую
# Хост, на котором будет работать веб-сервер. 0.0.0.0 - делает его доступным со всех сетевых интерфейсов.
WEB_HOST=0.0.0.0
# Порт, на котором будет работать веб-сервер.
WEB_PORT=8080
# Включить/выключить API-маршруты в веб-интерфейсе.
WEB_API_ENABLED=false              # включить API-роуты
# API-ключ для защиты API-маршрутов. Передается в заголовке X-API-Key или Authorization: Api-Key <ключ>.
WEB_API_KEY=
# URL веб-сервиса для получения статуса. Используется ботом для проверки доступности веб-компонента.
BACKFILL_STATUS_URL=http://web:8080
# API-ключ для доступа к API статуса, если он защищен.
BACKFILL_API_KEY=
# Режим аутентификации для веб-интерфейса: 'basic' (логин/пароль) или 'webauthn' (биометрия/ключи безопасности).
WEB_AUTH_MODE=basic
# Секретный ключ для подписи сессий в веб-интерфейсе. Обязательно смените в продакшене.
WEB_SESSION_SECRET=change-me-please
# ID проверяющей стороны (Relying Party) для WebAuthn. Обычно это домен вашего сайта.
WEB_RP_ID=admin.example.com
# Имя проверяющей стороны (Relying Party) для WebAuthn. Отображается пользователю при регистрации ключа.
WEB_RP_NAME=War & Peace Admin

# --- TLS/прокси (Caddy) ---
# Домен для автоматического получения TLS-сертификата от Let's Encrypt через Caddy.
CADDY_DOMAIN=admin.example.com
# Ваш email для регистрации в Let's Encrypt и получения уведомлений о сертификатах.
CADDY_EMAIL=you@example.com
# Имя пользователя для базовой аутентификации (Basic Auth) в веб-интерфейсе.
# WEB_BASIC_AUTH_USER=admin
# Пароль для базовой аутентификации (Basic Auth) в веб-интерфейсе.
# WEB_BASIC_AUTH_PASSWORD=strongpass

# --- Автообновление и авто-суммаризация ---
# Режим автоматического обновления базы статей: 'auto' (включено) или 'manual' (выключено).
BASE_AUTO_UPDATE=manual
# Целевая дата для автоматического обновления (в формате ДД.ММ.ГГГГ).
BASE_AUTO_UPDATE_DATE_TARGET=01.01.2025
# Режим автоматической суммаризации статей: 'auto' (включено) или 'manual' (выключено).
BASE_AUTO_SUM=manual
# Модель, используемая для автоматической суммаризации (gemini или mistral).
BASE_AUTO_SUM_MODEL=gemini

# --- Метрики ---
# Включить/выключить сбор метрик Prometheus.
METRICS_ENABLED=true
# Порт для эндпоинта с метриками (/metrics).
METRICS_PORT=8000

# --- Сохранение статистики сессии (UI) ---
# При включении данные с /stats (HTTP, новости, токены) агрегируются посуточно в БД.
# История доступна в веб-интерфейсе по ссылке "История" на странице /stats.
SESSION_STATS=false
# Интервал (сек) периодического обновления агрегатов в БД
SESSION_STATS_FLUSH_INTERVAL_SEC=60

# --- Логи и таймауты Telegram ---
# Уровень логирования (DEBUG, INFO, WARNING, ERROR, CRITICAL).
LOG_LEVEL=INFO
# Включить/выключить подробные логи от сторонних библиотек (например, httpx).
ENABLE_VERBOSE_LIB_LOGS=false
# Время (в секундах), на которое блокируются повторные системные уведомления для администратора.
ADMIN_ALERTS_COOLDOWN_SEC=900      # троттлинг повторных админ-уведомлений (секунды)
# Количество попыток повторной отправки запроса к Telegram API в случае ошибки.
TG_RETRY_ATTEMPTS=4
# Количество примеров постов для логирования при ошибках.
LOG_POST_EXAMPLES=3
# Максимальное количество постов, обрабатываемых за один запуск парсера.
MAX_POSTS_PER_RUN=3
# Время (в секундах), в течение которого может быть запущен пропущенный по расписанию джоб.
JOB_MISFIRE_GRACE=60
# Случайная задержка (в секундах) перед запуском джоба для распределения нагрузки.
JOB_JITTER=3
# Таймаут чтения (в секундах) для запросов к Telegram API.
TG_READ_TIMEOUT=60
# Таймаут записи (в секундах) для запросов к Telegram API.
TG_WRITE_TIMEOUT=60
# Таймаут соединения (в секундах) для запросов к Telegram API.
TG_CONNECT_TIMEOUT=30
# Таймаут получения соединения из пула (в секундах) для запросов к Telegram API.
TG_POOL_TIMEOUT=60
# Версия HTTP, используемая для запросов к Telegram API.
TG_HTTP_VERSION=1.1
# Интервал опроса (в секундах) для получения обновлений от Telegram (в режиме polling).
TG_POLL_INTERVAL=1.0
# Таймаут длинного опроса (в секундах) для получения обновлений от Telegram.
TG_LONG_POLL_TIMEOUT=10

# --- Circuit Breaker / сеть ---
# Количество сбоев, после которого "автоматический выключатель" (Circuit Breaker) размыкается для Telegram API.
TG_CB_FAILURE_THRESHOLD=5
# Временное окно (в секундах), в течение которого подсчитываются сбои.
TG_CB_FAILURE_WINDOW_SEC=60
# Время (в секундах), через которое "автоматический выключатель" переходит в полуразомкнутое состояние.
TG_CB_OPEN_COOLDOWN_SEC=30
# Троттлинг (в секундах) для логирования повторяющихся сетевых ошибок.
NET_LOG_THROTTLE_SEC=900

# --- Бэкапы / восстановление ---
# Директория для хранения локальных бэкапов базы данных.
LOCAL_BACKUP_DIR=/var/backups/warandpeace
# Временная директория для создания бэкапов.
BACKUP_TMP_DIR=/tmp/backup
# Срок хранения бэкапов в днях (0 - хранить вечно).
BACKUP_RETENTION_DAYS=0           # дней хранения бэкапов (0 — отключено)
# Минимальное свободное место (в ГБ) на диске для создания бэкапа (0 - не проверять).
LOCAL_MIN_FREE_GB=0               # мин. свободное место в ГБ (0 — проверка отключена)
# Публичные ключи age для шифрования бэкапов (через запятую).
# AGE_PUBLIC_KEYS=age1xxxx,age1yyyy
# Секретный ключ age для расшифровки бэкапов.
# AGE_SECRET_KEY=AGE-SECRET-KEY-xxxxxxxx

# --- Прочее для утилит ---
# Путь к директории приложения. Используется в служебных скриптах.
APP_DIR=/app                      # путь, где лежит .env (используется в backup env)

# --- API usage persistence ---
# Включить персистентную статистику использования внешних API в PostgreSQL
API_USAGE_PERSISTENCE_ENABLED=true
# Интервал (сек) периодического сброса буфера событий в БД
API_USAGE_FLUSH_INTERVAL_SEC=60
# Включить учет Telegram API в метриках использования (опционально)
API_USAGE_INCLUDE_TELEGRAM=false
API_USAGE_EVENTS_TTL_DAYS=30