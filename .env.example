# ==============================
# WarAndPeace Bot — .env.example
# Скопируйте в `.env` и заполните значениями
# ==============================

# --- Telegram ---
# Токен бота (получите у @BotFather)
TELEGRAM_BOT_TOKEN=
# Канал/чат для публикаций: @username или numeric -100...
TELEGRAM_CHANNEL_ID=
# Основной админ (numeric id)
TELEGRAM_ADMIN_ID=
# (Опционально) Несколько админов через запятую
TELEGRAM_ADMIN_IDS=

# --- LLM (Gemini / Mistral) ---
# Включение/выключение провайдеров
GEMINI_ENABLED=true
MISTRAL_ENABLED=true
# Приоритетный провайдер: gemini или mistral
LLM_PRIMARY=gemini

# Ключи Gemini. Рекомендуемый способ — одной переменной через запятую
# Пример: GOOGLE_API_KEYS=key1,key2,key3
GOOGLE_API_KEYS=
# Альтернатива (обратная совместимость):
# GOOGLE_API_KEY=
# GOOGLE_API_KEY_1=
# GOOGLE_API_KEY_2=

# Ключ и модель Mistral (используется как резервный провайдер по коду)
MISTRAL_API_KEY=

# Модели и лимиты
GEMINI_MODEL=gemini-2.0-flash
MISTRAL_MODEL_NAME=mistral-large-latest
LLM_TIMEOUT_SEC=30
LLM_MAX_TOKENS=512

# --- Время и таймзона ---
# Прикладная таймзона для форматирования времени в приложении
TIMEZONE=Europe/Moscow
# Системная таймзона контейнера может браться из TZ (см. docker-compose.yml)
# TZ=Europe/Moscow

# --- Telegram HTTP / таймауты и ретраи ---
TG_READ_TIMEOUT=60
TG_WRITE_TIMEOUT=60
TG_CONNECT_TIMEOUT=10
TG_POOL_TIMEOUT=60
TG_HTTP_VERSION=1.1
# Повторы при сетевых/временных ошибках Telegram
TG_RETRY_ATTEMPTS=4

# Circuit Breaker (предохранитель)
TG_CB_FAILURE_THRESHOLD=5
TG_CB_FAILURE_WINDOW_SEC=60
TG_CB_OPEN_COOLDOWN_SEC=30

# --- Логи и поведение ---
# Уровни: DEBUG | INFO | WARNING | ERROR | CRITICAL
LOG_LEVEL=INFO
# Включить подробные логи сторонних библиотек (httpx, python-telegram-bot)
ENABLE_VERBOSE_LIB_LOGS=false
# Сколько примеров новых статей показывать в логах
LOG_POST_EXAMPLES=3
# Лимит публикаций за один цикл фоновой задачи
MAX_POSTS_PER_RUN=3
# Троттлинг повторных админ-уведомлений (секунды)
ADMIN_ALERTS_COOLDOWN_SEC=900

# --- Метрики Prometheus ---
# Включение HTTP-сервера метрик внутри контейнера
METRICS_ENABLED=true
# ВАЖНО: сервер метрик в контейнере слушает 8000 по умолчанию
# В docker-compose порт 8000 контейнера пробрасывается на хост, обычно как 9090
# Не меняйте METRICS_PORT без необходимости, чтобы избежать несоответствий с пробросом портов
# METRICS_PORT=8000

# --- Планировщик фоновой задачи ---
# Допуск на «пропущенные» запуски (секунды)
JOB_MISFIRE_GRACE=60
# Джиттер (рандомизация запуска) для снижения коллизий (секунды)
JOB_JITTER=3

# --- Резервное копирование (локальное) ---
# Включение/выключение бэкапов (пока не используется, но для будущего)
BACKUP_ENABLED=true
# Расписание в формате cron. По умолчанию — ежедневно в 03:00 UTC.
BACKUP_CRON="0 3 * * *"
# Путь к БД SQLite внутри контейнера
DB_SQLITE_PATH=/app/database/articles.db
# Корень каталога бэкапов внутри контейнера
LOCAL_BACKUP_DIR=/var/backups/warandpeace
# Временная директория
BACKUP_TMP_DIR=/tmp/backup
# Сколько дней хранить бэкапы (0 — отключить ротацию)
BACKUP_RETENTION_DAYS=7
# Минимум свободного места на диске (ГБ) для бэк��па (0 — отключить проверку)
LOCAL_MIN_FREE_GB=1

# Шифрование бэкапов (age)
# Список публичных ключей получателей через запятую (включает шифрование при backup --encrypt auto)
AGE_PUBLIC_KEYS=
# Приватный ключ для расшифровки (нужен только для restore зашифрованных артефактов)
# В проде держите вне .env (секреты/CI)
AGE_SECRET_KEY=

# Расписание ежедневного бэкапа (используется контейнером cron)
BACKUP_CRON="0 3 * * *"

# --- Веб-интерфейс (просмотр БД) ---
# Порт веб-интерфейса на хосте
WEB_PORT=8080
# Базовая аутентификация (рекомендуется)
WEB_BASIC_AUTH_USER=admin
WEB_BASIC_AUTH_PASSWORD=change_me
# Публичный JSON API (/api/...) — по умолчанию выключен
WEB_API_ENABLED=false
# Для standalone-запуска web-сервера (обычно не требуется с docker compose)
# WEB_ENABLED=true

# --- Прокси (опционально) ---
# HTTPS_PROXY=http://user:pass@host:port
# ALL_PROXY=socks5://user:pass@host:port

# --- Прочее ---
# Системная TZ для контейнеров (см. docker-compose.yml)
# TZ=Europe/Moscow
