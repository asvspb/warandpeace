# ======================
# WarAndPeace Bot - .env.example
# Заполните и переименуйте в `.env`
# ======================

# --- Telegram ---
# Токен бота, полученный у @BotFather
TELEGRAM_BOT_TOKEN=
# ID канала/чата, куда публикуем. Может быть @username или numeric id
TELEGRAM_CHANNEL_ID=
# ID администратора (число). Используется для команд /healthcheck, /daily_digest и админ-уведомлений
TELEGRAM_ADMIN_ID=

# --- LLM (Gemini / Mistral) ---
# Включение/выключение провайдеров
GEMINI_ENABLED=true
MISTRAL_ENABLED=true
# Приоритетный провайдер: gemini или mistral
LLM_PRIMARY=gemini

# Ключи Gemini. Рекомендуемый способ — одной переменной через запятую
# Пример: GOOGLE_API_KEYS=key1,key2,key3
GOOGLE_API_KEYS=
# Альтернатива (обратная совместимость):
# GOOGLE_API_KEY=
# GOOGLE_API_KEY_1=
# GOOGLE_API_KEY_2=

# Ключ Mistral
MISTRAL_API_KEY=

# Модели и лимиты
GEMINI_MODEL=gemini-2.0-flash
MISTRAL_MODEL_NAME=mistral-large-latest
LLM_TIMEOUT_SEC=30
LLM_MAX_TOKENS=512

# --- Время и таймзона ---
# Прикладная таймзона для форматирования времени в приложении
TIMEZONE=Europe/Moscow
# Системная таймзона контейнера (если запускаете в Docker Compose)
# В docker-compose.yml уже задано: TZ=Europe/Moscow
# Если запускаете локально без Compose, установите TZ вручную в окружении шелла
# TZ=Europe/Moscow

# --- Telegram HTTP/кэш ---
# Таймауты HTTP-клиента python-telegram-bot (секунды)
TG_READ_TIMEOUT=30
TG_WRITE_TIMEOUT=30
TG_CONNECT_TIMEOUT=10
TG_POOL_TIMEOUT=5
# TTL кэша имени канала (секунды)
TELEGRAM_CACHE_TTL_SEC=3600

# --- Логи и поведение ---
# Уровень логирования приложения: DEBUG | INFO | WARNING | ERROR
LOG_LEVEL=INFO
# Включить подробные логи сторонних библиотек (httpx, PTB и др.)
ENABLE_VERBOSE_LIB_LOGS=false
# Сколько примеров новых статей показывать в сводке логов за запуск
LOG_POST_EXAMPLES=3
# Лимит публикаций за один цикл фоновой задачи
MAX_POSTS_PER_RUN=3
# Троттлинг админ-уведомлений (секунды)
ADMIN_ALERTS_COOLDOWN_SEC=900

# --- Метрики Prometheus ---
# Включение HTTP-сервера метрик внутри контейнера
METRICS_ENABLED=true
# Порт метрик внутри контейнера (в Compose пробрасывается наружу)
METRICS_PORT=8000

# --- Планировщик фоновой задачи ---
# Допуск на «пропущенные» запуски (секунды)
JOB_MISFIRE_GRACE=60
# Джиттер (рандомизация запуска) для снижения коллизий (секунды)
JOB_JITTER=3

# --- Резервное копирование (локальное) ---
# Включение/выключение бэкапов (пока не используется, но для будущего)
BACKUP_ENABLED=true
# Расписание в формате cron. По умолчанию — ежедневно в 03:00 UTC.
BACKUP_CRON="0 3 * * *"
# Путь к БД SQLite внутри контейнера
DB_SQLITE_PATH=/app/database/articles.db
# Путь к каталогу для бэкапов внутри контейнера
LOCAL_BACKUP_DIR=/var/backups/warandpeace
# Временный каталог для сборки бэкапа
BACKUP_TMP_DIR=/tmp/backup
# Сколько дней хранить ежедневные бэкапы. Установите 0 для отключения ротации.
BACKUP_RETENTION_DAYS=7
# Минимальное свободное место в ГБ для создания бэкапа. Установите 0 для отключения проверки.
LOCAL_MIN_FREE_GB=1

# --- Шифрование бэкапов (age) ---
# Публичные ключи получателей (через запятую), кому можно будет расшифровать бэкап.
# Пример: AGE_PUBLIC_KEYS=age1ql...
AGE_PUBLIC_KEYS=
# Приватный ключ для расшифровки (используется в restore.py).
# ВАЖНО: Не храните его в .env в проде, используйте Docker Secrets или другие безопасные способы.
AGE_SECRET_KEY=
