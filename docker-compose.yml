version: '3.8'

services:
  telegram-bot:
    build: .
    container_name: warandpeace-bot
    command: python3 src/bot.py
    env_file:
      - .env.test
    environment:
      - TZ=${TZ:-Europe/Moscow}
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - METRICS_PORT=${METRICS_PORT:-8000}
    volumes:
      - ./database_test:/app/database
      - ./backups:/var/backups/warandpeace
    ports:
      - "${METRICS_PORT:-8000}:8000"
    restart: unless-stopped

  web:
    build: .
    command: uvicorn src.webapp.server:app --host 0.0.0.0 --port ${WEB_PORT:-8080}
    env_file: .env
    environment:
      - TZ=${TZ:-Europe/Moscow}
      - WEB_ENABLED=true
      - WEB_PORT=${WEB_PORT:-8080}
      - WEB_BASIC_AUTH_USER=${WEB_BASIC_AUTH_USER}
      - WEB_BASIC_AUTH_PASSWORD=${WEB_BASIC_AUTH_PASSWORD}
    volumes:
      - ./database:/app/database:ro
    ports:
      - "${WEB_PORT:-8080}:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 3s
      retries: 3

  cron:
    build: .
    # Команда `cron -f` запускает cron в foreground-режиме, что необходимо для Docker.
    # `&& tail -f /var/log/cron.log` позволяет видеть логи крона через `docker-compose logs`.
    command: >
      bash -c "
        echo '${BACKUP_CRON:-0 3 * * *} python3 /app/tools/backup.py --component db --backend local >> /var/log/cron.log 2>&1' > /etc/cron.d/backup-cron &&
        chmod 0644 /etc/cron.d/backup-cron &&
        touch /var/log/cron.log &&
        cron -f & tail -f /var/log/cron.log
      "
    env_file:
      - .env.test
    environment:
      - TZ=${TZ:-Europe/Moscow}
    volumes:
      - ./database_test:/app/database:ro
      - ./backups:/var/backups/warandpeace
    restart: unless-stopped
