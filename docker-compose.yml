services:
  redis:
    image: redis:7-alpine
    container_name: wp-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
  wg-client:
    image: linuxserver/wireguard:latest
    container_name: wg-client
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    volumes:
      # Том /lib/modules нужен, только если модуль WireGuard не загружен на хосте
      - /lib/modules:/lib/modules:ro
      - ./config/wireguard:/config
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Moscow
      - PEERDNS=false
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    ports:
      - "${METRICS_PORT:-9090}:8000" # Пробрасываем порт метрик бота
    healthcheck:
      test:
        - CMD-SHELL
        - |
          v=$$(wg show wg0 latest-handshakes | awk '{print $$2}')
          [ -n "$$v" ] && [ $$(( $$(date +%s) - $$v )) -lt 180 ]
      interval: 30s
      timeout: 3s
      retries: 3
    # Optional watchdog sidecar (disabled by default). Uncomment 'watchdog' service below.

  postgres:
    image: postgres:16-alpine
    container_name: wp-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-warandpeace}
      - POSTGRES_USER=${POSTGRES_USER:-wp}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=${TZ:-Europe/Moscow}
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  telegram-bot:
    build: .
    container_name: warandpeace-bot
    command: bash -lc "./scripts/sys/wait-for-net.sh --timeout 30 api.telegram.org api.ipify.org www.warandpeace.ru && python3 src/bot.py"
    network_mode: "service:wg-client"
    env_file:
      - .env
    environment:
      - TZ=${TZ:-Europe/Moscow}
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - METRICS_PORT=${METRICS_PORT:-8000}
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      # Autodiscovery of web status endpoint (bot tries multiple, but this helps)
      - BACKFILL_STATUS_URL=${BACKFILL_STATUS_URL:-http://web:8080}
      - BACKFILL_API_KEY=${WEB_API_KEY}
      # Подключение к Postgres по сервисному имени (Docker DNS 127.0.0.11 в wg-client)
      - DATABASE_URL=postgresql+psycopg://wp:${POSTGRES_PASSWORD}@postgres:5432/warandpeace
    volumes:
      - ./database:/app/database
      - ./backups:/var/backups/warandpeace
    restart: unless-stopped
    depends_on: # Примечание: в Compose v3 это не ждет healthcheck, только запускает контейнеры в нужном порядке.
      - wg-client
      - redis
      - postgres

  watchdog:
    image: docker:cli
    container_name: wg-watchdog
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./scripts/wireguard/wg_watchdog.sh:/usr/local/bin/wg_watchdog.sh:ro
      - ./logs:/logs
    env_file:
      - .env
    environment:
      - WG_CONTAINER=${WG_CONTAINER:-wg-client}
      - WG_WATCHDOG_POLL=${WG_WATCHDOG_POLL:-30}
      - WG_UNHEALTHY_THRESHOLD=${WG_UNHEALTHY_THRESHOLD:-7}
      - WG_DISABLE_MINUTES=${WG_DISABLE_MINUTES:-15}
    restart: unless-stopped
    entrypoint: ["/bin/sh", "-lc", "wg_watchdog.sh"]

  web:
    build: .
    command: uvicorn src.webapp.server:app --host 0.0.0.0 --port 8080
    env_file: .env
    environment:
      - TZ=${TZ:-Europe/Moscow}
      - WEB_ENABLED=true
      - WEB_PORT=8080
      # Point web dashboard to bot's Prometheus endpoint
      # The bot shares network namespace with wg-client, exposing metrics on port 8000 there
      - METRICS_SCRAPE_URL=${METRICS_SCRAPE_URL:-http://wg-client:8000}
      - WEB_AUTH_MODE=${WEB_AUTH_MODE:-basic}
      - WEB_RP_ID=${WEB_RP_ID}
      - WEB_RP_NAME=${WEB_RP_NAME}
      - WEB_SESSION_SECRET=${WEB_SESSION_SECRET}
      - WEB_API_ENABLED=${WEB_API_ENABLED:-true}
      - WEB_API_KEY=${WEB_API_KEY}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - DATABASE_URL=postgresql+psycopg://wp:${POSTGRES_PASSWORD}@postgres:5432/warandpeace
    volumes:
      - ./database:/app/database
    ports:
      - "${WEB_PORT:-8080}:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 3s
      retries: 3
    depends_on:
      - postgres

  # caddy:
  #   image: caddy:2-alpine
  #   container_name: wp-caddy
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   environment:
  #     - CADDY_DOMAIN=${CADDY_DOMAIN}
  #     - CADDY_EMAIL=${CADDY_EMAIL}
  #   volumes:
  #     - ./Caddyfile:/etc/caddy/Caddyfile:ro
  #   depends_on:
  #     - web
  #     - redis

  cron:
    build: .
    # Команда `cron -f` запускает cron в foreground-режиме, что необходимо для Docker.
    # Перенаправляем логи cron в stdout для просмотра через `docker-compose logs`.
    command: >
      bash -c "
        echo '${BACKUP_CRON:-0 3 * * *} python3 /app/tools/backup.py --component db --backend local 2>&1' > /etc/cron.d/backup-cron &&
        echo '' >> /etc/cron.d/backup-cron &&
        chmod 0644 /etc/cron.d/backup-cron &&
        crontab /etc/cron.d/backup-cron &&
        cron -f -L 15
      "
    env_file:
      - .env
    environment:
      - TZ=${TZ:-Europe/Moscow}
    volumes:
      - ./database:/app/database:ro
      - ./backups:/var/backups/warandpeace
    restart: unless-stopped
